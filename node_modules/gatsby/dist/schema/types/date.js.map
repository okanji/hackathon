{"version":3,"sources":["../../../src/schema/types/date.js"],"names":["moment","require","GraphQLString","GraphQLBoolean","GraphQLScalarType","Kind","oneLine","ISO_8601_FORMAT","GraphQLDate","name","description","serialize","String","parseValue","parseLiteral","ast","kind","STRING","value","undefined","isDate","test","momentDate","utc","isValid","formatDate","date","fromNow","difference","formatString","locale","normalizedDate","JSON","parse","stringify","format","diff","dateResolver","type","args","resolve","source","context","fieldName","Array","isArray","map","d","module","exports"],"mappings":"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","sourcesContent":["const moment = require(`moment`)\nconst {\n  GraphQLString,\n  GraphQLBoolean,\n  GraphQLScalarType,\n  Kind,\n} = require(`graphql`)\nconst { oneLine } = require(`common-tags`)\n\nconst ISO_8601_FORMAT = [\n  `YYYY`,\n  `YYYY-MM`,\n  `YYYY-MM-DD`,\n  `YYYYMMDD`,\n\n  // Local Time\n  `YYYY-MM-DDTHH`,\n  `YYYY-MM-DDTHH:mm`,\n  `YYYY-MM-DDTHHmm`,\n  `YYYY-MM-DDTHH:mm:ss`,\n  `YYYY-MM-DDTHHmmss`,\n  `YYYY-MM-DDTHH:mm:ss.SSS`,\n  `YYYY-MM-DDTHHmmss.SSS`,\n  `YYYY-MM-DDTHH:mm:ss.SSSSSS`,\n  `YYYY-MM-DDTHHmmss.SSSSSS`,\n  // `YYYY-MM-DDTHH:mm:ss.SSSSSSSSS`,\n  // `YYYY-MM-DDTHHmmss.SSSSSSSSS`,\n\n  // Local Time (Omit T)\n  `YYYY-MM-DD HH`,\n  `YYYY-MM-DD HH:mm`,\n  `YYYY-MM-DD HHmm`,\n  `YYYY-MM-DD HH:mm:ss`,\n  `YYYY-MM-DD HHmmss`,\n  `YYYY-MM-DD HH:mm:ss.SSS`,\n  `YYYY-MM-DD HHmmss.SSS`,\n  `YYYY-MM-DD HH:mm:ss.SSSSSS`,\n  `YYYY-MM-DD HHmmss.SSSSSS`,\n  // `YYYY-MM-DD HH:mm:ss.SSSSSSSSS`,\n  // `YYYY-MM-DD HHmmss.SSSSSSSSS`,\n\n  // Coordinated Universal Time (UTC)\n  `YYYY-MM-DDTHHZ`,\n  `YYYY-MM-DDTHH:mmZ`,\n  `YYYY-MM-DDTHHmmZ`,\n  `YYYY-MM-DDTHH:mm:ssZ`,\n  `YYYY-MM-DDTHHmmssZ`,\n  `YYYY-MM-DDTHH:mm:ss.SSSZ`,\n  `YYYY-MM-DDTHHmmss.SSSZ`,\n  `YYYY-MM-DDTHH:mm:ss.SSSSSSZ`,\n  `YYYY-MM-DDTHHmmss.SSSSSSZ`,\n  // `YYYY-MM-DDTHH:mm:ss.SSSSSSSSSZ`,\n  // `YYYY-MM-DDTHHmmss.SSSSSSSSSZ`,\n\n  // Coordinated Universal Time (UTC) (Omit T)\n  `YYYY-MM-DD HHZ`,\n  `YYYY-MM-DD HH:mmZ`,\n  `YYYY-MM-DD HHmmZ`,\n  `YYYY-MM-DD HH:mm:ssZ`,\n  `YYYY-MM-DD HHmmssZ`,\n  `YYYY-MM-DD HH:mm:ss.SSSZ`,\n  `YYYY-MM-DD HHmmss.SSSZ`,\n  `YYYY-MM-DD HH:mm:ss.SSSSSSZ`,\n  `YYYY-MM-DD HHmmss.SSSSSSZ`,\n  // `YYYY-MM-DD HH:mm:ss.SSSSSSSSSZ`,\n  // `YYYY-MM-DD HHmmss.SSSSSSSSSZ`,\n\n  // Coordinated Universal Time (UTC) (Omit T, Extra Space before Z)\n  `YYYY-MM-DD HH Z`,\n  `YYYY-MM-DD HH:mm Z`,\n  `YYYY-MM-DD HHmm Z`,\n  `YYYY-MM-DD HH:mm:ss Z`,\n  `YYYY-MM-DD HHmmss Z`,\n  `YYYY-MM-DD HH:mm:ss.SSS Z`,\n  `YYYY-MM-DD HHmmss.SSS Z`,\n  `YYYY-MM-DD HH:mm:ss.SSSSSS Z`,\n  `YYYY-MM-DD HHmmss.SSSSSS Z`,\n\n  `YYYY-[W]WW`,\n  `YYYY[W]WW`,\n  `YYYY-[W]WW-E`,\n  `YYYY[W]WWE`,\n  `YYYY-DDDD`,\n  `YYYYDDDD`,\n]\n\nconst GraphQLDate = new GraphQLScalarType({\n  name: `Date`,\n  description: oneLine`\n    A date string, such as 2007-12-03, compliant with the ISO 8601 standard\n    for representation of dates and times using the Gregorian calendar.`,\n  serialize: String,\n  parseValue: String,\n  parseLiteral(ast) {\n    return ast.kind === Kind.STRING ? ast.value : undefined\n  },\n})\n\n// Check if this is a date.\n// All the allowed ISO 8601 date-time formats used.\nfunction isDate(value) {\n  // quick check if value does not look like a date\n  if (typeof value === `number` || !/^\\d{4}/.test(value)) {\n    return false\n  }\n\n  const momentDate = moment.utc(value, ISO_8601_FORMAT, true)\n  return momentDate.isValid()\n}\n\nconst formatDate = ({\n  date,\n  fromNow,\n  difference,\n  formatString,\n  locale = `en`,\n}) => {\n  const normalizedDate = JSON.parse(JSON.stringify(date))\n  if (formatString) {\n    return moment\n      .utc(normalizedDate, ISO_8601_FORMAT, true)\n      .locale(locale)\n      .format(formatString)\n  } else if (fromNow) {\n    return moment\n      .utc(normalizedDate, ISO_8601_FORMAT, true)\n      .locale(locale)\n      .fromNow()\n  } else if (difference) {\n    return moment().diff(\n      moment.utc(normalizedDate, ISO_8601_FORMAT, true).locale(locale),\n      difference\n    )\n  }\n  return normalizedDate\n}\n\nconst dateResolver = {\n  type: `Date`,\n  args: {\n    formatString: {\n      type: GraphQLString,\n      description: oneLine`\n        Format the date using Moment.js' date tokens, e.g.\n        \\`date(formatString: \"YYYY MMMM DD\")\\`.\n        See https://momentjs.com/docs/#/displaying/format/\n        for documentation for different tokens.`,\n    },\n    fromNow: {\n      type: GraphQLBoolean,\n      description: oneLine`\n        Returns a string generated with Moment.js' \\`fromNow\\` function`,\n    },\n    difference: {\n      type: GraphQLString,\n      description: oneLine`\n        Returns the difference between this date and the current time.\n        Defaults to \"miliseconds\" but you can also pass in as the\n        measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\",\n        and \"seconds\".`,\n    },\n    locale: {\n      type: GraphQLString,\n      description: oneLine`\n        Configures the locale Moment.js will use to format the date.`,\n    },\n  },\n  resolve(source, args, context, { fieldName }) {\n    const date = source[fieldName]\n    if (date == null) return null\n\n    return Array.isArray(date)\n      ? date.map(d => formatDate({ date: d, ...args }))\n      : formatDate({ date, ...args })\n  },\n}\n\nmodule.exports = { GraphQLDate, dateResolver, isDate }\n"],"file":"date.js"}