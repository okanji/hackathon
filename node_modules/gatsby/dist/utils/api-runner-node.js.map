{"version":3,"sources":["../../src/utils/api-runner-node.js"],"names":["Promise","require","glob","_","chalk","tracer","globalTracer","reporter","getCache","apiList","createNodeId","createContentDigest","buildObjectType","buildUnionType","buildInterfaceType","buildInputObjectType","emitter","getNonGatsbyCodeFrame","boundPluginActionCreators","doubleBind","boundActionCreators","api","plugin","actionOptions","traceId","name","keys","Object","doubleBoundActionCreators","i","length","key","boundActionCreator","args","initAPICallTracing","parentSpan","startSpan","spanName","spanArgs","defaultSpanArgs","childOf","merge","runAPI","gatsbyNode","resolve","spanOptions","pluginSpan","setTag","pathPrefix","store","loadNodeContent","getNodes","getNode","getNodesByType","hasNodeChanged","getNodeAndSavePathDependency","getState","program","prefixPaths","config","namespacedCreateNodeId","id","tracing","cache","actions","apiFinished","alreadyDisplayed","createPageAction","createPage","warning","stripIndent","bold","possiblyCodeFrame","push","warn","join","apiCallArgs","schema","pluginOptions","fromCallback","callback","cb","err","val","finish","result","then","res","filteredPlugins","hasAPIFile","sync","apisRunningById","Map","apisRunningByTraceId","waitingForCasacadeToFinish","module","exports","pluginSource","apiSpanArgs","apiSpan","forEach","traceTags","value","panic","plugins","flattenedPlugins","filter","noSourcePluginPlugins","p","apiRunInstance","span","startTime","Date","toJSON","type","node","internal","contentDigest","filename","page","path","argsJson","JSON","stringify","omit","waitForCascadingActions","set","has","currentCount","get","stopQueuedApiRuns","onAPIRunComplete","actionHandler","action","payload","on","off","mapSeries","pluginName","catch","panicOnBuild","results","delete","size","emit","isEmpty","instance","apisByTraceIdCount"],"mappings":"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","sourcesContent":["const Promise = require(`bluebird`)\nconst glob = require(`glob`)\nconst _ = require(`lodash`)\nconst chalk = require(`chalk`)\n\nconst tracer = require(`opentracing`).globalTracer()\nconst reporter = require(`gatsby-cli/lib/reporter`)\nconst getCache = require(`./get-cache`)\nconst apiList = require(`./api-node-docs`)\nconst createNodeId = require(`./create-node-id`)\nconst createContentDigest = require(`./create-content-digest`)\nconst {\n  buildObjectType,\n  buildUnionType,\n  buildInterfaceType,\n  buildInputObjectType,\n} = require(`../schema/types/type-builders`)\nconst { emitter } = require(`../redux`)\nconst { getNonGatsbyCodeFrame } = require(`./stack-trace-utils`)\n\n// Bind action creators per plugin so we can auto-add\n// metadata to actions they create.\nconst boundPluginActionCreators = {}\nconst doubleBind = (boundActionCreators, api, plugin, actionOptions) => {\n  const { traceId } = actionOptions\n  if (boundPluginActionCreators[plugin.name + api + traceId]) {\n    return boundPluginActionCreators[plugin.name + api + traceId]\n  } else {\n    const keys = Object.keys(boundActionCreators)\n    const doubleBoundActionCreators = {}\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i]\n      const boundActionCreator = boundActionCreators[key]\n      if (typeof boundActionCreator === `function`) {\n        doubleBoundActionCreators[key] = (...args) => {\n          // Let action callers override who the plugin is. Shouldn't be\n          // used that often.\n          if (args.length === 1) {\n            boundActionCreator(args[0], plugin, actionOptions)\n          } else if (args.length === 2) {\n            boundActionCreator(args[0], args[1], actionOptions)\n          }\n        }\n      }\n    }\n    boundPluginActionCreators[\n      plugin.name + api + traceId\n    ] = doubleBoundActionCreators\n    return doubleBoundActionCreators\n  }\n}\n\nconst initAPICallTracing = parentSpan => {\n  const startSpan = (spanName, spanArgs = {}) => {\n    const defaultSpanArgs = { childOf: parentSpan }\n\n    return tracer.startSpan(spanName, _.merge(defaultSpanArgs, spanArgs))\n  }\n\n  return {\n    tracer,\n    parentSpan,\n    startSpan,\n  }\n}\n\nconst runAPI = (plugin, api, args) => {\n  const gatsbyNode = require(`${plugin.resolve}/gatsby-node`)\n  if (gatsbyNode[api]) {\n    const parentSpan = args && args.parentSpan\n    const spanOptions = parentSpan ? { childOf: parentSpan } : {}\n    const pluginSpan = tracer.startSpan(`run-plugin`, spanOptions)\n\n    pluginSpan.setTag(`api`, api)\n    pluginSpan.setTag(`plugin`, plugin.name)\n\n    let pathPrefix = ``\n    const { store, emitter } = require(`../redux`)\n    const {\n      loadNodeContent,\n      getNodes,\n      getNode,\n      getNodesByType,\n      hasNodeChanged,\n      getNodeAndSavePathDependency,\n    } = require(`../db/nodes`)\n    const { boundActionCreators } = require(`../redux/actions`)\n\n    const doubleBoundActionCreators = doubleBind(\n      boundActionCreators,\n      api,\n      plugin,\n      { ...args, parentSpan: pluginSpan }\n    )\n\n    if (store.getState().program.prefixPaths) {\n      pathPrefix = store.getState().config.pathPrefix\n    }\n\n    const namespacedCreateNodeId = id => createNodeId(id, plugin.name)\n\n    const tracing = initAPICallTracing(pluginSpan)\n\n    const cache = getCache(plugin.name)\n\n    // Ideally this would be more abstracted and applied to more situations, but right now\n    // this can be potentially breaking so targeting `createPages` API and `createPage` action\n    let actions = doubleBoundActionCreators\n    let apiFinished = false\n    if (api === `createPages`) {\n      let alreadyDisplayed = false\n      const createPageAction = actions.createPage\n      // create new actions object with wrapped createPage action\n      // doubleBoundActionCreators is memoized, so we can't just\n      // reassign createPage field as this would cause this extra logic\n      // to be used in subsequent APIs and we only want to target this `createPages` call.\n      actions = {\n        ...actions,\n        createPage: (...args) => {\n          createPageAction(...args)\n          if (apiFinished && !alreadyDisplayed) {\n            const warning = [\n              reporter.stripIndent(`\n              Action ${chalk.bold(\n                `createPage`\n              )} was called outside of its expected asynchronous lifecycle ${chalk.bold(\n                `createPages`\n              )} in ${chalk.bold(plugin.name)}.\n              Ensure that you return a Promise from ${chalk.bold(\n                `createPages`\n              )} and are awaiting any asynchronous method invocations (like ${chalk.bold(\n                `graphql`\n              )} or http requests).\n              For more info and debugging tips: see ${chalk.bold(\n                `https://gatsby.dev/sync-actions`\n              )}\n            `),\n            ]\n\n            const possiblyCodeFrame = getNonGatsbyCodeFrame()\n            if (possiblyCodeFrame) {\n              warning.push(possiblyCodeFrame)\n            }\n\n            reporter.warn(warning.join(`\\n\\n`))\n            alreadyDisplayed = true\n          }\n        },\n      }\n    }\n\n    const apiCallArgs = [\n      {\n        ...args,\n        pathPrefix,\n        boundActionCreators: actions,\n        actions,\n        loadNodeContent,\n        store,\n        emitter,\n        getCache,\n        getNodes,\n        getNode,\n        getNodesByType,\n        hasNodeChanged,\n        reporter,\n        getNodeAndSavePathDependency,\n        cache,\n        createNodeId: namespacedCreateNodeId,\n        createContentDigest,\n        tracing,\n        schema: {\n          buildObjectType,\n          buildUnionType,\n          buildInterfaceType,\n          buildInputObjectType,\n        },\n      },\n      plugin.pluginOptions,\n    ]\n\n    // If the plugin is using a callback use that otherwise\n    // expect a Promise to be returned.\n    if (gatsbyNode[api].length === 3) {\n      return Promise.fromCallback(callback => {\n        const cb = (err, val) => {\n          pluginSpan.finish()\n          callback(err, val)\n          apiFinished = true\n        }\n        gatsbyNode[api](...apiCallArgs, cb)\n      })\n    } else {\n      const result = gatsbyNode[api](...apiCallArgs)\n      pluginSpan.finish()\n      return Promise.resolve(result).then(res => {\n        apiFinished = true\n        return res\n      })\n    }\n  }\n\n  return null\n}\n\nlet filteredPlugins\nconst hasAPIFile = plugin => glob.sync(`${plugin.resolve}/gatsby-node*`)[0]\n\nlet apisRunningById = new Map()\nlet apisRunningByTraceId = new Map()\nlet waitingForCasacadeToFinish = []\n\nmodule.exports = async (api, args = {}, pluginSource) =>\n  new Promise(resolve => {\n    const { parentSpan } = args\n    const apiSpanArgs = parentSpan ? { childOf: parentSpan } : {}\n    const apiSpan = tracer.startSpan(`run-api`, apiSpanArgs)\n\n    apiSpan.setTag(`api`, api)\n    _.forEach(args.traceTags, (value, key) => {\n      apiSpan.setTag(key, value)\n    })\n\n    // Check that the API is documented.\n    // \"FAKE_API_CALL\" is used when code needs to trigger something\n    // to happen once the the API queue is empty. Ideally of course\n    // we'd have an API (returning a promise) for that. But this\n    // works nicely in the meantime.\n    if (!apiList[api] && api !== `FAKE_API_CALL`) {\n      reporter.panic(`api: \"${api}\" is not a valid Gatsby api`)\n    }\n\n    const { store } = require(`../redux`)\n    const plugins = store.getState().flattenedPlugins\n    // Get the list of plugins that implement gatsby-node\n    if (!filteredPlugins) {\n      filteredPlugins = plugins.filter(plugin => hasAPIFile(plugin))\n    }\n\n    // Break infinite loops.\n    // Sometimes a plugin will implement an API and call an\n    // action which will trigger the same API being called.\n    // \"onCreatePage\" is the only example right now.\n    // In these cases, we should avoid calling the originating plugin\n    // again.\n    let noSourcePluginPlugins = filteredPlugins\n    if (pluginSource) {\n      noSourcePluginPlugins = filteredPlugins.filter(\n        p => p.name !== pluginSource\n      )\n    }\n\n    const apiRunInstance = {\n      api,\n      args,\n      pluginSource,\n      resolve,\n      span: apiSpan,\n      startTime: new Date().toJSON(),\n      traceId: args.traceId,\n    }\n\n    // Generate IDs for api runs. Most IDs we generate from the args\n    // but some API calls can have very large argument objects so we\n    // have special ways of generating IDs for those to avoid stringifying\n    // large objects.\n    let id\n    if (api === `setFieldsOnGraphQLNodeType`) {\n      id = `${api}${apiRunInstance.startTime}${args.type.name}${args.traceId}`\n    } else if (api === `onCreateNode`) {\n      id = `${api}${apiRunInstance.startTime}${\n        args.node.internal.contentDigest\n      }${args.traceId}`\n    } else if (api === `preprocessSource`) {\n      id = `${api}${apiRunInstance.startTime}${args.filename}${args.traceId}`\n    } else if (api === `onCreatePage`) {\n      id = `${api}${apiRunInstance.startTime}${args.page.path}${args.traceId}`\n    } else {\n      // When tracing is turned on, the `args` object will have a\n      // `parentSpan` field that can be quite large. So we omit it\n      // before calling stringify\n      const argsJson = JSON.stringify(_.omit(args, `parentSpan`))\n      id = `${api}|${apiRunInstance.startTime}|${\n        apiRunInstance.traceId\n      }|${argsJson}`\n    }\n    apiRunInstance.id = id\n\n    if (args.waitForCascadingActions) {\n      waitingForCasacadeToFinish.push(apiRunInstance)\n    }\n\n    apisRunningById.set(apiRunInstance.id, apiRunInstance)\n    if (apisRunningByTraceId.has(apiRunInstance.traceId)) {\n      const currentCount = apisRunningByTraceId.get(apiRunInstance.traceId)\n      apisRunningByTraceId.set(apiRunInstance.traceId, currentCount + 1)\n    } else {\n      apisRunningByTraceId.set(apiRunInstance.traceId, 1)\n    }\n\n    let stopQueuedApiRuns = false\n    let onAPIRunComplete = null\n    if (api === `onCreatePage`) {\n      const path = args.page.path\n      const actionHandler = action => {\n        if (action.payload.path === path) {\n          stopQueuedApiRuns = true\n        }\n      }\n      emitter.on(`DELETE_PAGE`, actionHandler)\n      onAPIRunComplete = () => {\n        emitter.off(`DELETE_PAGE`, actionHandler)\n      }\n    }\n\n    Promise.mapSeries(noSourcePluginPlugins, plugin => {\n      if (stopQueuedApiRuns) {\n        return null\n      }\n\n      let pluginName =\n        plugin.name === `default-site-plugin`\n          ? `gatsby-node.js`\n          : `Plugin ${plugin.name}`\n\n      return new Promise(resolve => {\n        resolve(runAPI(plugin, api, { ...args, parentSpan: apiSpan }))\n      }).catch(err => {\n        reporter.panicOnBuild(`${pluginName} returned an error`, err)\n        return null\n      })\n    }).then(results => {\n      if (onAPIRunComplete) {\n        onAPIRunComplete()\n      }\n      // Remove runner instance\n      apisRunningById.delete(apiRunInstance.id)\n      const currentCount = apisRunningByTraceId.get(apiRunInstance.traceId)\n      apisRunningByTraceId.set(apiRunInstance.traceId, currentCount - 1)\n\n      if (apisRunningById.size === 0) {\n        const { emitter } = require(`../redux`)\n        emitter.emit(`API_RUNNING_QUEUE_EMPTY`)\n      }\n\n      // Filter empty results\n      apiRunInstance.results = results.filter(result => !_.isEmpty(result))\n\n      // Filter out empty responses and return if the\n      // api caller isn't waiting for cascading actions to finish.\n      if (!args.waitForCascadingActions) {\n        apiSpan.finish()\n        resolve(apiRunInstance.results)\n      }\n\n      // Check if any of our waiters are done.\n      waitingForCasacadeToFinish = waitingForCasacadeToFinish.filter(\n        instance => {\n          // If none of its trace IDs are running, it's done.\n          const apisByTraceIdCount = apisRunningByTraceId.get(instance.traceId)\n          if (apisByTraceIdCount === 0) {\n            instance.span.finish()\n            instance.resolve(instance.results)\n            return false\n          } else {\n            return true\n          }\n        }\n      )\n      return\n    })\n  })\n"],"file":"api-runner-node.js"}